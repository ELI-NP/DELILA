@startuml


class VMEConductor{
    +virtual RTC::ReturnCode_t onInitialize();

    +virtual RTC::ReturnCode_t onExecute(RTC::UniqueId ec_id);

    +int daq_dummy();
    +int daq_configure();
    +int daq_unconfigure();
    +int daq_start();
    +int daq_run();
    +int daq_stop();
    +int daq_pause();
    +int daq_resume();

    +int parse_params(::NVList* list);
    +int read_data_from_detectors();
    +int set_data();
    +int write_OutPort();

    -std::unique_ptr<VMEController> vmeCont;
    -std::vector<std::unique_ptr<VMEDevice>> vmeDev;
}





abstract class VMEController
{
    +virtual void utilsVMEinit(void) = 0;
    +virtual void utilsVMEend(void) = 0;
    +virtual void utilsVMEread(uint32_t busAddr, uint16_t *dataRead) = 0;
    +virtual void utilsVMEwrite(uint32_t busAddr, int data) = 0;
    +virtual void utilsVMEbltRead(uint32_t busAddr, int sizeBytes, uint32_t *dataBuff, int *dataTransf) = 0;
    +virtual int utilsVMEirqCheck(uint32_t lineNr) = 0;
    +virtual void utilsVMEsetAddrMod(int newaddrmod) = 0;
    +virtual void utilsVMEsetDataW(int newdataw) = 0;
}


abstract class VMEDevice
{
    +virtual void read_cfg() = 0;
    +virtual std::unique_ptr<VMEController> mod_configure(std::unique_ptr<VMEController> my_contr, uint32_t addr_offset, int modId) = 0;
    +virtual std::unique_ptr<VMEController> mod_start(std::unique_ptr<VMEController> my_contr) = 0;
    +virtual std::unique_ptr<VMEController> mod_stop(std::unique_ptr<VMEController> my_contr) = 0;
    +virtual std::unique_ptr<VMEController> mod_run(std::unique_ptr<VMEController> my_contr, std::shared_ptr<std::vector<TreeData>> t_data, int *fNEvents) = 0;
    +virtual int mod_checkifreader() = 0;
}

VMEConductor -down- VMEController
note bottom of VMEController: There can be multiple devices per VMEConductor, but only a single Controller.
VMEConductor -down- VMEDevice
note bottom of VMEDevice: Abstract classes, used to store objects from derived classes.


@enduml